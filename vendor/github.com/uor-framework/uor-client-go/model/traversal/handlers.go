package traversal

import (
	"context"
	"errors"

	"github.com/uor-framework/uor-client-go/model"
)

// ErrStopHandler signals the handler chain generated by Handlers() to stop
// processing the rest handlers. The successor nodes returned by the
// previous handlers are still returned.
var ErrStopHandler = errors.New("stop handler")

// Handler processes contents. This interface is adapted from
// github.com/containerd/containerd/images.Handler.
type Handler interface {
	// Handle handles the content described by the descriptor.
	Handle(ctx context.Context, tracker Tracker, node model.Node) ([]model.Node, error)
}

// HandlerFunc function implementing the Handler interface.
// This function is adapted from github.com/containerd/containerd/images.HandlerFunc.
type HandlerFunc func(ctx context.Context, tracker Tracker, node model.Node) ([]model.Node, error)

// Handle handles the content described by the descriptor.
func (fn HandlerFunc) Handle(ctx context.Context, tracker Tracker, node model.Node) ([]model.Node, error) {
	return fn(ctx, tracker, node)
}

// Handlers returns a handler that will run the handlers in sequence.
// This function is adapted from github.com/containerd/containerd/images.Handlers.
//
// A handler may return `ErrStopHandler` to stop calling additional handlers.
// Note: Handlers with `github.com/containerd/containerd/images.ErrStopHandler`
// cannot be used in this function.
func Handlers(handlers ...Handler) HandlerFunc {
	return func(ctx context.Context, tracker Tracker, node model.Node) ([]model.Node, error) {
		var successors []model.Node
		for _, handler := range handlers {
			nodes, err := handler.Handle(ctx, tracker, node)
			if err != nil {
				if errors.Is(err, ErrStopHandler) {
					break
				}
				return nil, err
			}
			successors = append(successors, nodes...)
		}
		return successors, nil
	}
}
